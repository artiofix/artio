/*
 * Copyright 2015-2019 Real Logic Ltd, Adaptive Financial Consulting Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import org.gradle.plugins.ide.eclipse.model.Classpath

buildscript {
    repositories {
        mavenCentral()
    }
}

plugins {
    id 'com.github.johnrengelman.shadow' version '5.0.0' apply false
    id 'net.researchgate.release' version '2.8.0'
}

def aeronVersion = '1.17.0'
def agronaVersion = '0.9.35'
def sbeVersion = '1.12.4'
def artioJavaVersion = JavaVersion.VERSION_1_8
def artioGroup = 'uk.co.real-logic'

defaultTasks 'clean', 'build', 'javadoc', 'install'

ext {
    group = artioGroup
    isReleaseVersion = !version.endsWith("SNAPSHOT")

    if (!project.hasProperty('ossrhUsername')) {
        ossrhUsername = ''
    }

    if (!project.hasProperty('ossrhPassword')) {
        ossrhPassword = ''
    }
}

allprojects {
    apply plugin: 'maven'
    apply plugin: 'signing'
    apply plugin: 'eclipse'

    repositories {
        mavenCentral()
        mavenLocal()
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'checkstyle'
    apply plugin: 'idea'

    // Make sure that we use the correct JDK in Eclipse
    // There needs to be a JDK8 JVM installed in Eclipse before
    // importing the generated projects.
    plugins.withType(JavaBasePlugin) {
        eclipse.classpath.file.whenMerged { Classpath path ->
            path.entries.findAll { it.path.contains('JRE_CONTAINER') }.each {
                it.path += "/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8"
            }
        }
    }

    group = artioGroup
    version = version

    compileJava {
        sourceCompatibility = artioJavaVersion
        targetCompatibility = artioJavaVersion
        options.encoding = 'UTF-8'
        options.deprecation = true
    }

    compileTestJava {
        sourceCompatibility = artioJavaVersion
        targetCompatibility = artioJavaVersion
        options.encoding = 'UTF-8'
        options.deprecation = true
    }

    dependencies {
        checkstyle 'com.puppycrawl.tools:checkstyle:8.19'

        testCompile 'junit:junit:4.12'
        testCompile 'org.mockito:mockito-core:2.27.0'
        testCompile 'org.hamcrest:hamcrest-library:1.3'
    }

    checkstyle {
        toolVersion = "8.19"
    }

    test {
        testLogging {
            events 'skipped', 'failed'
            showStandardStreams = true
            exceptionFormat = 'full'
            afterSuite { desc, result ->
                if (!desc.parent) {
                    println "Results: ${result.resultType} (${result.testCount} tests, " +
                        "${result.successfulTestCount} successes, " +
                        "${result.failedTestCount} failures, " +
                        "${result.skippedTestCount} skipped)"
                }
            }
        }

        systemProperty 'fix.core.close_checker', 'true'
        systemProperty "fix.core.debug", System.getProperty("fix.core.debug")

        beforeTest { desc ->
            if (System.properties["printTestNames"] != null) {
                print "Executing test ${desc.name} [${desc.className}]"
            }
        }

        afterTest { desc, result ->
            if (System.properties["printTestNames"] != null) {
                println " with result: ${result.resultType}"
            }
        }
    }

    javadoc {
        title = '<h1>Artio</h1>'
        options.bottom = '<i>Copyright &#169; 2015-2019 Real Logic Ltd. All Rights Reserved.</i>'
        if (JavaVersion.current().ordinal() >= JavaVersion.VERSION_1_10.ordinal()) {
            options.addBooleanOption 'html5', true
        }
    }

    task javadocJar(type: Jar) {
        archiveClassifier = 'javadoc'
        from javadoc
    }

    task sourcesJar(type: Jar) {
        archiveClassifier = 'sources'
        from sourceSets.main.allSource
    }

    jar {
        manifest.attributes(
            'Implementation-Title': 'Artio',
            'Implementation-Version': "${version}",
            'Implementation-Vendor': 'Real Logic Limited'
        )
    }

    task testJar(type: Jar, dependsOn: testClasses) {
        archiveClassifier = 'tests'
        archiveBaseName = "test-${project.archivesBaseName}"
        from sourceSets.test.output
    }

    task allDeps(type: DependencyReportTask) {}

    configurations {
        tests
    }

    artifacts {
        archives javadocJar, sourcesJar, testJar
        tests testJar
    }

    signing {
        required { isReleaseVersion && gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.archives
    }

    idea {
        module {
            downloadJavadoc = true
            downloadSources = true
        }
    }
}

def validationXsdPath = project(':artio-codecs').projectDir.toString() + '/src/main/resources/fpl/sbe.xsd'

project(':artio-codecs') {
    apply plugin: 'com.github.johnrengelman.shadow'

    def generatedDir = file("${buildDir}/generated-src")
    sourceSets {
        generated.java.srcDir generatedDir
    }

    dependencies {
        compile "org.agrona:agrona:${agronaVersion}"
        compile "uk.co.real-logic:sbe-tool:${sbeVersion}"
        testCompile sourceSets.generated.output
    }

    // Code Generation Configuration
    compileGeneratedJava {
        dependsOn 'generateMessages'
        sourceCompatibility = artioJavaVersion
        targetCompatibility = artioJavaVersion
        options.deprecation = true
        classpath += sourceSets.main.runtimeClasspath
    }

    task generateMessages(type: JavaExec) {
        main = 'uk.co.real_logic.sbe.SbeTool'
        classpath = sourceSets.main.runtimeClasspath
        systemProperties('sbe.output.dir': generatedDir,
            'sbe.target.language': 'Java',
            'sbe.validation.stop.on.error': 'true',
            'sbe.validation.xsd': validationXsdPath)
        args = [
            'src/main/resources/uk/co/real_logic/artio/messages/message-schema.xml',
            'src/main/resources/uk/co/real_logic/artio/storage/storage-message-schema.xml'
        ]
    }

    jar {
        from(sourceSets.generated.output) {
            include '**/*.class'
        }
    }

    jar.dependsOn compileGeneratedJava
}

project(':artio-session-codecs') {
    dependencies {
        compile project(path: ':artio-codecs')
    }

    def generatedDir = file("$buildDir/generated-src")
    sourceSets {
        generated.java.srcDir generatedDir
    }

    compileGeneratedJava {
        dependsOn 'generateCodecs'
        sourceCompatibility = artioJavaVersion
        targetCompatibility = artioJavaVersion
        options.deprecation = true
        classpath += sourceSets.main.runtimeClasspath
    }

    task generateCodecs(type: JavaExec) {
        main = 'uk.co.real_logic.artio.dictionary.CodecGenerationTool'
        classpath = sourceSets.main.runtimeClasspath
        args = [generatedDir, 'src/main/resources/session_dictionary.xml']
        outputs.dir generatedDir
    }

    jar {
        from(sourceSets.generated.output) {
            include '**/*.class'
        }
    }

    jar.dependsOn compileGeneratedJava
}

project(':artio-session-fixt-codecs') {

    dependencies {
        compile project(path: ':artio-codecs')
    }

    def generatedDir = file("$buildDir/generated-src")
    sourceSets {
        generated.java.srcDir generatedDir
    }

    compileGeneratedJava {
        dependsOn 'generateCodecs'
        sourceCompatibility = artioJavaVersion
        targetCompatibility = artioJavaVersion
        options.deprecation = true
        classpath += sourceSets.main.runtimeClasspath
    }

    task generateCodecs(type: JavaExec) {
        main = 'uk.co.real_logic.artio.dictionary.CodecGenerationTool'
        classpath = sourceSets.main.runtimeClasspath
        args = [generatedDir, 'src/main/resources/FIXT11.xml']
        outputs.dir generatedDir
    }

    jar {
        from(sourceSets.generated.output) {
            include '**/*.class'
        }
    }

    jar.dependsOn compileGeneratedJava
}

project(':artio-core') {

    dependencies {
        testCompile project(path: ':artio-codecs', configuration: 'tests')
        compile project(':artio-session-codecs')
        compile project(':artio-codecs')

        compile "io.aeron:aeron-client:${aeronVersion}"
        compile "io.aeron:aeron-archive:${aeronVersion}"
        compile "io.aeron:aeron-driver:${aeronVersion}"
        compile 'org.hdrhistogram:HdrHistogram:2.1.11'
    }

    test {
        systemProperties('java.net.preferIPv4Stack': true)
    }

    idea {
        dependencies {
            compile project(':artio-session-codecs').sourceSets.generated.output
            compile project(':artio-codecs').sourceSets.generated.output
        }
    }
}

project(':artio-system-tests') {
    apply plugin: 'com.github.johnrengelman.shadow'

    sourceSets {
        perf
    }

    dependencies {
        testCompile project(path: ':artio-core', configuration: 'tests')
        testCompile project(path: ':artio-codecs', configuration: 'tests')

        compile project(path: ':artio-core')
        compile "io.aeron:aeron-client:${aeronVersion}"

        perfCompile project
        perfCompile 'org.openjdk.jmh:jmh-core:1.21'
        annotationProcessor 'org.openjdk.jmh:jmh-generator-annprocess:1.21'
    }

    idea.module {
        scopes.COMPILE.plus += [configurations.perfCompile]
    }

    test {
        systemProperties(
            'aeron.dir.warn.if.exists': 'false',
            'aeron.use.windows.high.res.timer': 'true',
            'aeron.term.buffer.sparse.file': 'true')
    }

    task benchmarks(dependsOn: perfClasses) {
        shadowJar {
            archiveClassifier = "benchmarks"

            from sourceSets.main.output
            from sourceSets.perf.output
            from project.configurations.perfRuntime

            manifest.attributes('Main-Class': 'org.openjdk.jmh.Main')
        }

        doLast {
            shadowJar
        }
    }
}

project(':artio-samples') {
    apply plugin: 'com.github.johnrengelman.shadow'

    dependencies {
        compile project(':artio-core')
    }

    shadowJar {
        archiveFileName = 'samples.jar'
    }

    build.doLast {
        shadowJar
    }
}

subprojects {
    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                pom.project {
                    name = 'artio'
                    packaging = 'jar'
                    description = 'High-Performance FIX Gateway'

                    url = 'https://github.com/real-logic/artio'

                    scm {
                        connection = 'scm:git:https://github.com/real-logic/artio.git'
                        developerConnection = 'scm:git:https://github.com/real-logic/artio.git'
                        url = 'https://github.com/real-logic/artio.git'
                    }

                    licenses {
                        license {
                            name = 'The Apache License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }

                    developers {
                        developer {
                            id = 'RichardWarburton'
                            name = 'Richard Warburton'
                            email = 'richard.warburton@gmail.com'
                            url = 'https://github.com/RichardWarburton'
                        }
                        developer {
                            id = 'mjpt777'
                            name = 'Martin Thompson'
                            email = 'mjpt777@gmail.com'
                            url = 'https://github.com/mjpt777'
                        }
                    }
                }
            }
        }
    }
}

task uploadToMavenCentral {
    dependsOn 'artio-core:uploadArchives',
        'artio-samples:uploadArchives',
        'artio-system-tests:uploadArchives',
        'artio-codecs:uploadArchives',
        'artio-session-codecs:uploadArchives',
        'artio-session-fixt-codecs:uploadArchives'
}

wrapper {
    gradleVersion = '5.3.1'
    distributionType = 'ALL'
}
