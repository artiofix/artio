/*
 * Copyright 2015-2017 Real Logic Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import org.gradle.plugins.ide.eclipse.model.Classpath

apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'net.researchgate.release'
apply plugin: 'com.github.johnrengelman.shadow'

def aeronVersion = '1.3.0'
def agronaVersion = '0.9.6'

defaultTasks 'clean', 'build', 'install'

ext {
    group = fixGroup

    if (!project.hasProperty('ossrhUsername')) {
        ossrhUsername = ''
    }

    if (!project.hasProperty('ossrhPassword')) {
        ossrhPassword = ''
    }
}

allprojects {
    apply plugin: 'eclipse'
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'checkstyle'
    apply plugin: 'idea'

    // Make sure that we use the correct JDK in Eclipse
    // There needs to be a JDK8 JVM installed in Eclipse before
    // importing the generated projects.
    plugins.withType(JavaBasePlugin) {
        eclipse.classpath.file.whenMerged { Classpath path ->
            path.entries.findAll { it.path.contains('JRE_CONTAINER') }.each {
                it.path += "/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8"
            }
        }
    }

    group = fixGroup

    compileJava {
        sourceCompatibility = '1.8'
        targetCompatibility = '1.8'
    }

    [compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

    repositories {
        mavenCentral()
        maven {
            url "http://sevntu-checkstyle.github.com/sevntu.checkstyle/maven2"
        }
        //mavenLocal()
    }

    dependencies {
        checkstyle 'com.puppycrawl.tools:checkstyle:8.1'
        checkstyle "com.github.sevntu-checkstyle:sevntu-checks:1.24.1"

        testCompile 'org.hamcrest:hamcrest-all:1.3'
        testCompile 'junit:junit:4.12'
        testCompile 'org.mockito:mockito-core:2.8.47'
    }

    checkstyle {
        configFile = new File(rootDir, 'config/checkstyle/checkstyle.xml')
        toolVersion = "8.1"
    }

    test {
        testLogging {
            events 'skipped', 'failed'
            showStandardStreams = true
            exceptionFormat = 'full'
            afterSuite { desc, result ->
                if (!desc.parent) {
                    println "Results: ${result.resultType} (${result.testCount} tests, " +
                        "${result.successfulTestCount} successes, " +
                        "${result.failedTestCount} failures, " +
                        "${result.skippedTestCount} skipped)"
                }
            }
        }

        systemProperty 'fix.core.close_checker', 'true'
        systemProperty "fix.core.debug", System.getProperty("fix.core.debug")

        beforeTest { desc ->
            if (System.properties["printTestNames"] != null) {
                print "Executing test ${desc.name} [${desc.className}]"
            }
        }

        afterTest { desc, result ->
            if (System.properties["printTestNames"] != null) {
                println " with result: ${result.resultType}"
            }
        }
    }

    javadoc {
        title = '<h1>Fix Gateway</h1>'
        options.bottom = '<i>Copyright &#169; 2015-2017 Real Logic Ltd. All Rights Reserved.</i>'
    }

    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task testJar(type: Jar, dependsOn: testClasses) {
        classifier = 'tests'
        baseName = "test-${project.archivesBaseName}"
        from sourceSets.test.output
    }

    task javadocJar(type: Jar) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    task allDeps(type: DependencyReportTask) {}

    configurations {
        tests
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
        archives testJar
        tests testJar
    }

    idea {
        module {
            downloadJavadoc = true
            downloadSources = true
        }
    }
}

def validationXsdPath = project(':fix-gateway-codecs').projectDir.toString() + '/src/main/resources/fpl/sbe.xsd'

project(':fix-gateway-codecs') {
    apply plugin: 'com.github.johnrengelman.shadow'

    def generatedDir = file("${buildDir}/generated-src")
    sourceSets {
        generated.java.srcDir generatedDir
    }

    dependencies {
        compile "org.agrona:agrona:${agronaVersion}"
        compile 'uk.co.real-logic:sbe-all:1.7.0'
        testCompile sourceSets.generated.output
    }

    // Code Generation Configuration
    compileGeneratedJava.dependsOn 'generateMessages'
    compileGeneratedJava.classpath += sourceSets.main.runtimeClasspath

    task(generateMessages, type: JavaExec) {
        main = 'uk.co.real_logic.sbe.SbeTool'
        classpath = sourceSets.main.runtimeClasspath
        systemProperties('sbe.output.dir': generatedDir,
            'sbe.target.language': 'Java',
            'sbe.validation.stop.on.error': 'true',
            'sbe.validation.xsd': validationXsdPath)
        args = [
            'src/main/resources/uk/co/real_logic/fix_gateway/messages/message-schema.xml',
            'src/main/resources/uk/co/real_logic/fix_gateway/replication/replication-message-schema.xml',
            'src/main/resources/uk/co/real_logic/fix_gateway/storage/storage-message-schema.xml'
        ]
    }

    jar {
        from(sourceSets.generated.output) {
            include '**/*.class'
        }
    }

    jar.dependsOn compileGeneratedJava
}

project(':fix-gateway-session-codecs') {

    dependencies {
        compile project(path: ':fix-gateway-codecs')
    }

    def generatedDir = file("$buildDir/generated-src")
    sourceSets {
        generated.java.srcDir generatedDir
    }

    // Code Generation Configuration
    compileGeneratedJava.dependsOn 'generateCodecs'
    compileGeneratedJava.classpath += sourceSets.main.runtimeClasspath

    task(generateCodecs, type: JavaExec) {
        main = 'uk.co.real_logic.fix_gateway.dictionary.CodecGenerationTool'
        classpath = sourceSets.main.runtimeClasspath
        args = [generatedDir, 'src/main/resources/session_dictionary.xml']
        outputs.dir generatedDir
    }

    jar {
        from(sourceSets.generated.output) {
            include '**/*.class'
        }
    }

    jar.dependsOn compileGeneratedJava
}

project(':fix-gateway-core') {
    apply plugin: 'application'

    mainClassName = 'uk.co.real_logic.fix_gateway.FixEngine'

    dependencies {
        testCompile project(path: ':fix-gateway-codecs', configuration: 'tests')
        compile project(':fix-gateway-session-codecs')
        compile project(':fix-gateway-codecs')

        compile "io.aeron:aeron-client:${aeronVersion}"
        compile "io.aeron:aeron-driver:${aeronVersion}"
        compile 'org.hdrhistogram:HdrHistogram:2.1.9'
    }

    run {
        systemProperties(System.properties)
    }

    build.doLast {
        tasks.distZip.execute()
    }

    test {
        systemProperties('java.net.preferIPv4Stack': true)
    }

    idea {
        dependencies {
            compile project(':fix-gateway-session-codecs').sourceSets.generated.output
            compile project(':fix-gateway-codecs').sourceSets.generated.output
        }
    }
}

project(':fix-gateway-system-tests') {
    apply plugin: 'com.github.johnrengelman.shadow'

    sourceSets {
        perf
    }

    dependencies {
        testCompile project(path: ':fix-gateway-core', configuration: 'tests'),
            project(path: ':fix-gateway-codecs', configuration: 'tests')

        compile project(path: ':fix-gateway-core'),
            "io.aeron:aeron-client:${aeronVersion}"

        perfCompile project,
            'org.openjdk.jmh:jmh-core:1.19',
            'org.openjdk.jmh:jmh-generator-annprocess:1.19'
    }

    idea.module {
        scopes.COMPILE.plus += [configurations.perfCompile]
    }

    task benchmarks(dependsOn: perfClasses) {
        shadowJar {
            classifier = "benchmarks"

            from sourceSets.main.output
            from sourceSets.perf.output
            from project.configurations.perfRuntime

            manifest.attributes('Main-Class': 'org.openjdk.jmh.Main')
        }

        doLast {
            shadowJar.execute()
        }
    }
}

project(':fix-gateway-samples') {
    apply plugin: 'com.github.johnrengelman.shadow'

    dependencies {
        compile project(':fix-gateway-core')
    }

    shadowJar {
        baseName = 'samples.jar'
    }

    build.doLast {
        tasks.shadowJar.execute()
    }
}

if (System.properties["uploadArchives"] != null) {
    println "Enabling uploading of archives"

    subprojects {
        uploadArchives {
            repositories {
                mavenDeployer {
                    snapshotRepository(url: project.ext.repoSnapshotUrl) {
                        authentication(userName: ossrhUsername, password: ossrhPassword)
                    }
                    repository(url: project.ext.repoReleaseUrl) {
                        authentication(userName: ossrhUsername, password: ossrhPassword)
                    }

                    pom.project {
                        name = 'Fix Gateway'
                        packaging = 'pom'
                        description = 'Resilient High-Performance FIX Gateway'

                        url = 'https://github.com/real-logic/fix-gateway'

                        scm {
                            connection = 'scm:git:https://github.com/real-logic/fix-gateway.git'
                            developerConnection = 'scm:git:https://github.com/real-logic/fix-gateway.git'
                            url = 'https://github.com/real-logic/fix-gateway.git'
                        }

                        licenses {
                            license {
                                name = 'The Apache License, Version 2.0'
                                url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                            }
                        }

                        developers {
                            developer {
                                id = 'mjpt777'
                                name = 'Martin Thompson'
                                email = 'mjpt777@gmail.com'
                                url = 'https://github.com/mjpt777'
                            }
                            developer {
                                id = 'RichardWarburton'
                                name = 'Richard Warburton'
                                email = 'richard.warburton@gmail.com'
                                url = 'https://github.com/RichardWarburton'
                            }
                        }
                    }
                }
            }
        }
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.0.2'
    distributionType = 'ALL'
}
